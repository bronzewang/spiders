[package]
name = "spiders-dossier"
version = "0.0.1"
edition = "2021"
authors = ["Cuprum Wangzuo <cuprumwz@foxmail.com"]
description = "dossier menages for tribers isntance named spiders"
license = "MIT OR Apache-2.0"

[lib]
crate-type = ["cdylib", "rlib" ]

[dependencies]
tribers = { version = "0" }

spiders-scheme = { version = "0", path = "../../pieces/spiders-scheme" }

anyhow = "1"
thiserror = "1"

futures = { version = "0.3" }
futures-util = { version = "0.3" }
async-trait = { version = "0.1" }

tokio = { version = "1", features = ["full"] }
console = { version = "0.15" }
tracing = { version = "0.1" }
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
tracing-opentelemetry = { version = "0.24" }

opentelemetry = { version = "0.23", features = ["metrics"] }
opentelemetry_sdk = { version = "0.23", features = ["metrics", "rt-tokio"] }
opentelemetry-stdout = { version = "0.4", features = ["metrics", "metrics"] }
opentelemetry-appender-log = { version = "0.4", default-features = false }
opentelemetry-prometheus = { version = "0.16" }
prometheus = { version = "0.13" }

log = { version = "0.4" }

leptos = { version = "0.6", features = ["nightly"] }
leptos_axum = { version = "0.6", optional = true }
leptos_meta = { version = "0.6", features = ["nightly"] }
leptos_router = { version = "0.6", features = ["nightly"] }

clap = { version = "4", features = ["derive", "env"] }

serde = { version = "1" }
serde_json = { version = "1.0" }

http = { version = "1.0"}
hyper = { version = "1.0", features = ["full"] }
tower = { version = "0.4", features = ["util"] }
tower-http = { version = "0.5", features = ["add-extension"] }
axum = { version = "0.7", optional = true }
# axum-login = { version = "0.15" }

nusb = { version = "0.1" }

sqlx = { version = "0.7", features = ["sqlite", "time", "runtime-tokio"] }
sea-orm = { version = "0.12" }

udev = { version = "0.7" }
tokio-udev = { version = "0.9" }

serialport = { version = "4" }
tokio-serial = { version = "5" }

rumqttc = { version = "0.24" }

tonic = { version = "0.12" }
prost = { version = "0.12" }
prost-types = { version = "0.12" }

[build-dependencies]
tonic-build = { version = "0.12" }
prost-build = { version = "0.12" }

[features]
default = [ "ssr" ]

hydrate = ["leptos/hydrate", "leptos_meta/hydrate", "leptos_router/hydrate"]
ssr = [
    "dep:axum",
    # "dep:tokio",
    # "dep:tower",
    # "dep:tower-http",
    # "dep:leptos_axum",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
    # "dep:tracing",
    # "dep:sqlx",
    # "dep:xml",
]

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "spiders-dossier"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
# style-file = "style/main.scss"

# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
# end2end-cmd = "npx playwright test"
# end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"

syntax = "proto3";

package greeter;

// 对外的api接口，类似restful接口
service Greeter {
    // 登签
	// ping----客户端信息
	// pong----id信息
	// 是否是major client, 需要一个标识符以确保连接是否覆盖。minor可以不需要标识符
	// 是否可以做到链接断开就释放client
    rpc Sign(SignPing) returns (SignPong) {}

	// 超时断开
    // rpc Keep() returns () {}

    // Toolkit列表
    // rpc ToolkitList(ToolkitListPing) returns (ToolkitListPong)

	// Toolkit配置
    // rpc ToolkitConfig() returns ()

	// Toolkit启动，识别utensil
    // rpc ToolkitStartup() returns ()

    // Toolkit附着
    // rpc ToolkitAttach(ToolkitAttachPing) returns (ToolkitAttachPong) {}

	// Toolkit脱离
    // rpc ToolkitDetach(ToolkitDetachPing) returns (ToolkitDetachPong) {}

	// 器具清单
	// rpc UtensilList(UtensilListPing) returns (UtensilListPonge) {}

	// utensil需要编号来让basanos识别，否则测试用例无法兼容所有的snooper
	// 编号信息要入数据库
	// rpc UtensilIdentify() returns () {}

	// 怎么批量编号utensil，web端处理

    // 验证能力
	// rpc Ability(AbilityPing) returns (AbilityPong) {}
}

// 签到信息
message SignPing {
	// 时间戳
	int64 timestamp = 1;
	string name = 2;
}
message SignPong {
	// 时间戳
	int64 timestamp = 1;
}

message Toolkit {
	int32 id = 1;
	string name = 2;
	// /dev/ttyUSB1:115200或192.168.1.100:8000
	string path = 3;
	repeated Utensil utensils = 5;
}

message Utensil {
	int32 id = 1;
	// string name = 2;
	repeated Caliber calibers = 5;
}

message Caliber {
	int32 id = 1;
	oneof load {
		Serial serial = 5;
		Canbus canbus = 6;
	}
}

message Serial {
	// 串口参数
	int32 baudrate = 1;
}

message Canbus {
	// 串口参数
	int32 baudrate = 1;
}

message Wireio {
	int32 switch = 1;	// 接口开关
	int32 current = 2;	// 电流采集
	int32 voltage = 3;	// 电压采集
	CurrentLimit climit = 4;	// 电流限制
	VoltageLimit vlimit = 5;	// 电压限制
}

message CurrentLimit {
	int32 min = 1;
	int32 max = 2;
}

message VoltageLimit {
	int32 min = 1;
	int32 max = 2;
}
